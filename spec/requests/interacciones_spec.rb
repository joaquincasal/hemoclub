require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/donantes/candidatos", type: :request do
  before { allow(ENV).to receive(:[]).with("WEBHOOK_KEY").and_return("qwerty") }

  describe "POST /update" do
    context "email delivery report" do
      it "marca interaccion como entregada" do
        body = [{ data: { messageId: "unid", status: "Delivered" },
                  eventType: "Microsoft.Communication.EmailDeliveryReportReceived" }]
        interaccion = create(:interaccion, id_mensaje: "unid", estado_envio: nil)
        post interacciones_url(key: "qwerty"), params: body.to_json
        expect(interaccion.reload).to be_entregado
        expect(response).to have_http_status(:ok)
      end

      it "marca interaccion como fallida" do
        body = [{ data: { messageId: "unid", status: "Failed" },
                  eventType: "Microsoft.Communication.EmailDeliveryReportReceived" }]
        interaccion = create(:interaccion, id_mensaje: "unid", estado_envio: nil)
        post interacciones_url(key: "qwerty"), params: body.to_json
        expect(interaccion.reload).to be_fallido
        expect(response).to have_http_status(:ok)
      end
    end

    context "email engagement tracking" do
      it "marca interaccion como leida" do
        body = [{ data: { messageId: "unid", engagementType: "view" },
                  eventType: "Microsoft.Communication.EmailEngagementTrackingReportReceived" }]
        interaccion = create(:interaccion, id_mensaje: "unid", estado_interaccion: "enviado")
        post interacciones_url(key: "qwerty"), params: body.to_json
        expect(interaccion.reload).to be_leido
        expect(response).to have_http_status(:ok)
      end

      it "no hace nada si el evento es otro" do
        body = [{ data: { messageId: "unid", engagementType: "click" },
                  eventType: "Microsoft.Communication.EmailEngagementTrackingReportReceived" }]
        interaccion = create(:interaccion, id_mensaje: "unid", estado_interaccion: "enviado")
        expect do
          post interacciones_url(key: "qwerty"), params: body.to_json
        end.not_to change(interaccion, :estado_interaccion)
        expect(response).to have_http_status(:ok)
      end
    end
  end
end
