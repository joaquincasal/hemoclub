require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/donantes", type: :request do
  include Devise::Test::IntegrationHelpers

  # This should return the minimal set of attributes required to create a valid
  # Donante. As you add validations to Donante, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { apellidos: "PÃ©rez", nombre: "Juan", tipo_documento: "DNI", numero_documento: "92364174",
      sexo: "masculino", fecha_nacimiento: 20.years.ago.to_date, correo_electronico: "vzhlxfyd@mail.com" }
  end

  before { sign_in Usuario.new }

  describe "GET /index" do
    it "renders a successful response" do
      Donante.create! valid_attributes
      get donantes_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      donante = Donante.create! valid_attributes
      get donante_url(donante)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_donante_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      donante = Donante.create! valid_attributes
      get edit_donante_url(donante)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Donante" do
        expect do
          post donantes_url, params: { donante: valid_attributes }
        end.to change(Donante, :count).by(1)
      end

      it "redirects to the created donante" do
        post donantes_url, params: { donante: valid_attributes }
        expect(response).to redirect_to(donante_url(Donante.last))
      end
    end

    context "con donante existente" do
      before { create(:donante, valid_attributes) }

      it "no crea un donante duplicado" do
        expect do
          post donantes_url, params: { donante: valid_attributes }
        end.not_to change(Donante, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post donantes_url, params: { donante: valid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        { segundo_nombre: "Facundo" }
      end

      it "updates the requested donante" do
        donante = Donante.create! valid_attributes
        patch donante_url(donante), params: { donante: new_attributes }
        donante.reload
        expect(donante.segundo_nombre).to eq new_attributes[:segundo_nombre]
      end

      it "redirects to the donante" do
        donante = Donante.create! valid_attributes
        patch donante_url(donante), params: { donante: new_attributes }
        donante.reload
        expect(response).to redirect_to(donante_url(donante))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        Donante.create! valid_attributes
        donante = Donante.create! valid_attributes.merge(numero_documento: "11222333",
                                                         correo_electronico: "hola@hola.com")
        patch donante_url(donante), params: { donante: { numero_documento: valid_attributes[:numero_documento] } }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested donante" do
      donante = Donante.create! valid_attributes
      expect do
        delete donante_url(donante)
      end.to change(Donante, :count).by(-1)
    end

    it "redirects to the donantes list" do
      donante = Donante.create! valid_attributes
      delete donante_url(donante)
      expect(response).to redirect_to(donantes_url)
    end
  end
end
