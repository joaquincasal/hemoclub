require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/listas", type: :request do
  include Devise::Test::IntegrationHelpers

  # This should return the minimal set of attributes required to create a valid
  # Lista. As you add validations to Lista, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      nombre: "un nombre",
      filtro_attributes: {
        parametros: [{ tipo: "FiltroPorAtributo",
                       atributo: "tipo_donante",
                       operador: "distinto",
                       valor: "reposicion" }]
      }
    }
  end

  let(:invalid_attributes) do
    { nombre: "" }
  end

  before { sign_in Usuario.new }

  describe "GET /index" do
    it "renders a successful response" do
      Lista.create! valid_attributes
      get listas_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      lista = Lista.create! valid_attributes
      get lista_url(lista)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_lista_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      lista = Lista.create! valid_attributes
      get edit_lista_url(lista)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Lista" do
        expect do
          post listas_url, params: { lista: valid_attributes }
        end.to change(Lista, :count).by(1)
                                    .and change(Filtro, :count).by(1)
      end

      it "redirects to the created lista" do
        post listas_url, params: { lista: valid_attributes }
        expect(response).to redirect_to(lista_url(Lista.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Lista" do
        expect do
          post listas_url, params: { lista: invalid_attributes }
        end.not_to change(Lista, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post listas_url, params: { lista: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        { nombre: "otro nombre" }
      end

      it "updates the requested lista" do
        lista = Lista.create! valid_attributes
        patch lista_url(lista), params: { lista: new_attributes }
        lista.reload
        expect(lista.nombre).to eq new_attributes[:nombre]
      end

      it "redirects to the lista" do
        lista = Lista.create! valid_attributes
        patch lista_url(lista), params: { lista: new_attributes }
        lista.reload
        expect(response).to redirect_to(lista_url(lista))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        lista = Lista.create! valid_attributes
        patch lista_url(lista), params: { lista: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested lista" do
      lista = Lista.create! valid_attributes
      expect do
        delete lista_url(lista)
      end.to change(Lista, :count).by(-1)
    end

    it "redirects to the listas list" do
      lista = Lista.create! valid_attributes
      delete lista_url(lista)
      expect(response).to redirect_to(listas_url)
    end
  end
end
